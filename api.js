require('dotenv').config();

const PORT = process.env.PORT;

const exp = require('express');
const app = exp();

app.use(exp.json()); // access the body request

app.listen(PORT, () => {
  console.log(`Servidor X-MEN rodando na porta: ${PORT}`); // acessar logs 'docker logs <nome-container>'
});

const { login, createUser, getUser } = require('./user/controller.js');
const { getMutant } = require('./mutant/controller.js');

app.post('/login', login);

/* AutenticaÃ§Ã£o utilizando um Token no formato JWT, que virÃ¡ no cabeÃ§alho das requisiÃ§Ãµes.
Este tipo de autenticaÃ§Ã£o, Ã© chamado de Bearer Authentication. Enquanto JWT define o tipo do formato do Token, Bearer define como o Token Ã© trafegado.
Para utilizar este padrÃ£o, basta definir um item no cabeÃ§alho da requisiÃ§Ã£o, chamado de 'Authorization' e que contenha a string 'Bearer SEU_TOKEN' */

app.get('/user', getUser);
app.post('/user', createUser);

app.get('/mutant', getMutant);

// const hashedPassword = await bcrypt.hash(password, 10); 
/* Salt rounds Ã© uma camada de proteÃ§Ã£o, onde cada round deixa o hash mais forte. Quanto mais rounds, mais seguro e mais demorado.
Menos rounds, mais rÃ¡pido e mais arriscado. 10 Ã© o padrÃ£o.

app.get('/', async (req, res) => {
    res.send('<h1 style="color: green">ðŸ”¥ Servidor dos X-MEN estÃ¡ rodando!</h1>');
});*/